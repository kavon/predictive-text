This predictive text software runs best on a Unix computer because it
uses make to help launch it properly. It uses stdin to get its training data
after it is scrubbed with sed.

The makefile has all the things you can do with it in there, but
the main ones are:

To use, at a prompt when in the directory with the Makefile type:
: make

Launches the predictive text program with no new training data.
It will try to find a " knowlege.dat " file in the same
directory. If it can't find it will will make a new file and
begin to accept new "prefixes" at the prompt.


: make train file=<path-to-file>

Launches the predictive text program with new training data.
If a knowlege file exists then it will load it into memory. 
Then it will train IN MEMORY and then give you a prompt. This
does not modify the knowlege file. If you want to save this new
trained data with the old one it loaded type \s at the prompt.

: make clean
Deletes current knowlege file (and compiled python file)


SOMETIMES CONFUSING THING WHEN AT THE PROMPT
What is typed at the prompt is the prefix. The program defines the
end of a word with a space. So if you were to type:

"hello world"

with no space after "world" and hit enter, then "hello" is "trained" on and it gives
suggestions for words that begin with "world". If you were to instead give it

"hello world "

Then it will train on both words and by default spit out the top suggestions for an
empty prefix.

TOP k SUGGESTIONS
I didn't have time to have it accept a command line argument for the number of suggestions.
In the start.py file you can find a line which says suggest(something, 10) and change that
number to however many suggestions you want.


